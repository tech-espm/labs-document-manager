@model DocumentType
@{
	ViewBag.Title = (Model == null ? Str.CreateDocumentType : Str.EditDocumentType);
}

@section Styles {
	<style type="text/css">
		.content-section {
			counter-reset: content-section;
		}

		.content-enum::before {
			counter-increment: content-section;
			content: counter(content-section);
		}
	</style>
}

<div class="modal fade" tabindex="-1" role="dialog" id="modalDelete">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="@Str.Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">@Str.Oops</h4>
			</div>
			<div class="modal-body">
				<p class="no-margin-bottom">@Str.DoYouReallyWantToDeleteTheDocumentType @Str.ThisOperationCannotBeUndone</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" onclick="deleteItem(true)"><i class="fa fa-check"></i>@Str.Delete</button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>@Str.Cancel</button>
			</div>
		</div>
	</div>
</div>

<form class="panel panel-default" action="." method="post" id="form">
	<div class="panel-heading clearfix">
		<div class="pull-left">
			@Str.DocumentTypesBasicInformation
		</div>
		@if (Model != null && ViewBag.DocumentTypeDelete == true) {
			<div class="pull-right">
				<button type="button" class="btn btn-outline btn-danger btn-xs" onclick="deleteItem(false)"><i class="fa fa-times"></i>@Str.Delete</button>
			</div>
		}
	</div>
	<div class="panel-body no-bottom">
		@if (Model != null) {
			<div class="form-group text-right">
				<span class="label label-default">Id @Model.Id</span>
			</div>
		}
		<div class="row">
			<div class="col-sm-6">
				<div class="form-group">
					<label for="nameEn">@Str.Name (@Str.English)</label>
					<input id="nameEn" name="nameEn" maxlength="64" class="form-control upper" type="text" value="@(Model == null ? "" : Model.Name.ValueEn)" />
				</div>
			</div>
			<div class="col-sm-6">
				<div class="form-group">
					<label for="namePtBr">@Str.Name (@Str.Portuguese)</label>
					<input id="namePtBr" name="namePtBr" maxlength="64" class="form-control upper" type="text" value="@(Model == null ? "" : Model.Name.ValuePtBr)" />
				</div>
			</div>
		</div>
		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="row">
					<div class="col-sm-6 col-md-8 col-sm-space-bottom">
						<select id="cbNewTag" class="form-control" size="1">
							@foreach (Tag t in Tag.GetAll()) {
								<option value="@t.Id">@t.Name.ToString()</option>
							}
						</select>
						<script type="text/javascript">
							//<![CDATA[
							"use strict";
							prepareCbSearch(_("cbNewTag"));
							//]]>
						</script>
					</div>
					<div class="col-sm-6 col-md-4">
						<button class="btn btn-outline btn-success btn-block" type="button" onclick="addTag()"><i class="fa fa-tag"></i>@Str.AddTag</button>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="table-responsive">
					<table class="table table-striped table-hover no-margin-bottom">
						<thead>
							<tr>
								<th class="col-min"></th>
								<th class="col-50">@Str.Tag</th>
								<th class="col-min"></th>
							</tr>
						</thead>
						<tbody id="tableTagsBody" class="content-section ui-sortable"></tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	<div class="panel-footer">
		<input value="@(Model == null ? Str.CreateDocumentType : Str.SaveChanges)" class="btn btn-primary btn-lg btn-block" type="submit" />
	</div>
</form>

@section Scripts {
	<script type="text/javascript">
		//<![CDATA[
		"use strict";

		var valueProp = "@Str._ValueProperty",
			tags = @Json.Serialize(Tag.GetAll()),
			tagsById = {},
			modelTags = @Json.Serialize(Model?.DefaultTagIds),
			cbNewTag = _("cbNewTag"),
			tableTagsBody = _("tableTagsBody");

		$(tableTagsBody).sortable().disableSelection();

		$(tableTagsBody).on("click", "button", function () {
			tableTagsBody.removeChild(this.parentNode.parentNode);
		});

		function clearTags() {
			if (JsonWebApi.active)
				return;

			while (tableTagsBody.firstChild)
				tableTagsBody.removeChild(tableTagsBody.firstChild);
		}

		function addTag(id) {
			if (JsonWebApi.active)
				return;

			if (!id) {
				id = parseInt(cbNewTag.value);
				if (!id)
					return;
			}

			var tag = tagsById[id];
			if (!tag)
				return;

			tableTagsBody.appendChild($('<tr data-id="' + id + '" class="ui-sortable-handle"><td class="col-min content-enum"></td><td class="col-50">' + encode(tag.name[valueProp]) + '</td><td class="col-min"><button type="button" title="@Str.Delete" class="btn btn-outline btn-danger"><i class="fa fa-nomargin fa-trash-o"></i></button></td></tr>')[0]);
		}

		(function () {
			var i;
			for (i = tags.length - 1; i >= 0; i--)
				tagsById[tags[i].id] = tags[i];
			if (modelTags && modelTags.length) {
				for (i = 0; i < modelTags.length; i++)
					addTag(modelTags[i]);
			}
		})();

		function deleteItem(confirmed) {
			if (JsonWebApi.active)
				return;

			Notification.hide();

			if (!confirmed) {
				$("#modalDelete").modal({
					backdrop: true,
					keyboard: true
				});
			} else {
				$("#modalDelete").modal("hide");

				Notification.wait();

				JsonWebApi.get("@Url.Action("Delete")", function (response) {
					if (response.success)
						window.location.href = "@Url.Action("Manage")";
					else
						Notification.error(response.value, true);
				}, "id", "@(Model == null ? 0 : Model.Id)");
			}
		}

		$("#form").validate({
			rules: {
				nameEn: {
					maxlength: 64,
					required: true
				},
				namePtBr: {
					maxlength: 64,
					required: true
				}
			},
			submitHandler: function (form) {
				if (JsonWebApi.active)
					return;

				var i, j, t, nameEn = _("nameEn").value, namePtBr = _("namePtBr").value, defaultTagIds = [];

				for (i = 0; i < tableTagsBody.childNodes.length; i++)
					defaultTagIds.push(parseInt(tableTagsBody.childNodes[i].getAttribute("data-id")));

				for (i = defaultTagIds.length - 1; i > 0; i--) {
					t = defaultTagIds[i];
					for (j = 0; j < i; j++) {
						if (t === defaultTagIds[j]) {
							Notification.error("@Html.Raw(Str.RepeatedTags)", true);
							return;
						}
					}
				}

				Notification.wait();

				@if (Model == null) {
					<text>
					JsonWebApi.post("@Url.Action("Create")", defaultTagIds, function (response) {
						if (response.success) {
							resetForm(form);
							//clearTags();
							Notification.success("@Html.Raw(Str.DocumentTypeSuccessfullyCreated)");
						} else {
							Notification.error(response.value, true);
						}
					}, "nameEn", nameEn, "namePtBr", namePtBr);
					</text>
				} else {
					<text>
					JsonWebApi.post("@Url.Action("Update")", defaultTagIds, function (response) {
						if (response.success)
							Notification.success("@Html.Raw(Str.DocumentTypeSuccessfullyChanged)");
						else
							Notification.error(response.value, true);
					}, "id", "@Model.Id", "nameEn", nameEn, "namePtBr", namePtBr);
					</text>
				}
			}
		});

		//]]>
	</script>
}
