@{
	ViewBag.Title = Str.Documents;
}

@section Styles {
	<style type="text/css">
		.content-section {
			counter-reset: content-section;
		}

		.content-enum::before {
			counter-increment: content-section;
			content: counter(content-section);
		}

		div.form-group i.fa-asterisk {
			display: none;
		}

		div.form-group.col-h2 i.fa-asterisk {
			display: inline-block;
		}
	</style>
}

<div class="modal fade" tabindex="-1" role="dialog" id="modalDelete">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="@Str.Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">@Str.Oops</h4>
			</div>
			<div class="modal-body">
				<p>@Str.DoYouReallyWantToDelete <span class="col-h" id="lblDeleteContentCount"></span>? @Str.ThisOperationCannotBeUndone<br /><br />@Str.ToConfirmEnterYes<br /><br /></p>
				<input type="text" id="txtDeleteContentConfirm" class="form-control upper" spellcheck="false" autocomplete="off" />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" onclick="confirmDelete()"><i class="fa fa-check"></i>@Str.Delete</button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>@Str.Cancel</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalDeleting">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="@Str.Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">@Str.Oops</h4>
			</div>
			<div class="modal-body">
				<p class="no-margin-bottom" id="lblDeleteProgress"></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>@Str.Cancel</button>
			</div>
		</div>
	</div>
</div>

<div class="panel panel-default">
	<form class="panel-body no-bottom" action="." method="post" id="form">

		<partial name="_UserBasicPermissions" />

		<div class="row">
			<div class="col-sm-3">
				<div class="form-group">
					<label for="id">@Str.Id</label>
					<input id="id" name="id" class="form-control upper" type="number" placeholder="@Str.Optional">
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="name">@Str.Name</label>
					<input id="name" name="name" maxlength="128" class="form-control upper" type="text" placeholder="@Str.Optional">
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="minimumCreationTime">@Str.MinimumCreation</label>
					<input id="minimumCreationTime" name="minimumCreationTime" maxlength="16" class="form-control upper" type="text" spellcheck="false" placeholder="@Str.Optional">
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="maximumCreationTime">@Str.MaximumCreation</label>
					<input id="maximumCreationTime" name="maximumCreationTime" maxlength="16" class="form-control upper" type="text" spellcheck="false" placeholder="@Str.Optional">
				</div>
			</div>
		</div>

		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="row">
					<div class="col-sm-6 col-md-8 col-sm-space-bottom">
						<select id="cbNewTag" class="form-control" size="1">
							@foreach (Tag t in Tag.GetAll()) {
								<option value="@t.Id">@t.Name.ToString()</option>
							}
						</select>
						<script type="text/javascript">
							//<![CDATA[
							"use strict";
							prepareCbSearch(_("cbNewTag"));
							//]]>
						</script>
					</div>
					<div class="col-sm-6 col-md-4">
						<button class="btn btn-outline btn-success btn-block" type="button" onclick="addTag()"><i class="fa fa-tag"></i>@Str.AddTag</button>
					</div>
				</div>
			</div>
			<div id="divTagsBody" class="panel-body no-bottom hidden"></div>
		</div>

		<div class="row">
			<div class="col-sm-3 col-sm-offset-9">
				<div class="form-group">
					<button class="btn btn-primary btn-block" type="submit"><i class="fa fa-search"></i>@Str.Search</button>
				</div>
			</div>
		</div>
	</form>
</div>

<div class="panel panel-default hidden" id="dataTablePanel">
	<div class="panel-body">
		<div id="divMultipleSelectionHelp" class="col-xs-space-bottom text-right"><small>@Str.HowToPerformAMultipleSelection</small> <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="left" data-html="true" title="" data-title="@Html.Raw(Str.MultipleSelectionExplanation)" data-original-title=""></i></div>

		<div id="dataTableMainPlaceholder" class="dataTable_wrapper"></div>
	</div>
</div>

@section Scripts {
	<script type="text/javascript">
		//<![CDATA[
		"use strict";

		var valueProp = "@Str._ValueProperty",
			dataTablePanel = _("dataTablePanel"),
			dataTableMainPlaceholder = _("dataTableMainPlaceholder"),
			txtDeleteContentConfirm = _("txtDeleteContentConfirm"),
			lblDeleteContentCount = _("lblDeleteContentCount"),
			lblDeleteProgress = _("lblDeleteProgress"),
			tags = @Json.Serialize(Tag.GetAll()),
			tagsById = {},
			selId = [],
			selTr = [],
			proceedDeletion = false,
			cbNewTag = _("cbNewTag"),
			divTagsBody = _("divTagsBody"),
			cbCourse = _("course"),
			cbDocumentType = _("documentType");

		$(divTagsBody).on("click", "button", function () {
			divTagsBody.removeChild(this.parentNode);
			//saveFilter();
			if (!divTagsBody.childNodes.length)
				divTagsBody.className = "panel-body no-bottom hidden";
		});

		cbDocumentType.addEventListener("change", function () {
			var i, div, documentTypeId = parseInt(cbDocumentType.value), course = cbCourse.course, documentTypePermissions, documentType, existingTags = {};

			for (i = divTagsBody.childNodes.length - 1; i >= 0; i--) {
				(div = divTagsBody.childNodes[i]).className = "form-group";
				existingTags[div.getAttribute("data-id")] = div;
			}

			if (!documentTypeId || !course || !(documentTypePermissions = course.documentTypes))
				return;

			for (i = documentTypePermissions.length - 1; i >= 0; i--) {
				if ((documentType = documentTypePermissions[i].documentType).id !== documentTypeId)
					continue;

				for (i = documentType.defaultTagIds.length - 1; i >= 0; i--) {
					if ((div = existingTags[documentType.defaultTagIds[i]]))
						div.className = "form-group col-h2";
				}

				return;
			}
		});

		function addTag(id, valueId) {
			if (JsonWebApi.active)
				return;

			//var save = false;

			if (!id) {
				//save = true;
				id = parseInt(cbNewTag.value);
				if (!id)
					return;
			}

			var tag = tagsById[id], div, i, v, className = "form-group", select, documentTypeId = parseInt(cbDocumentType.value), course = cbCourse.course, documentTypePermissions, documentType;
			if (!tag)
				return;

			for (i = divTagsBody.childNodes.length - 1; i >= 0; i--) {
				if (parseInt(divTagsBody.childNodes[i].getAttribute("data-id")) === id)
					return;
			}

			if (documentTypeId && course && (documentTypePermissions = course.documentTypes)) {
				for (i = documentTypePermissions.length - 1; i >= 0; i--) {
					if ((documentType = documentTypePermissions[i].documentType).id !== documentTypeId)
						continue;

					for (i = documentType.defaultTagIds.length - 1; i >= 0; i--) {
						if (id === documentType.defaultTagIds[i]) {
							className += " col-h2";
							break;
						}
					}

					break;
				}
			}

			div = $('<div data-id="' + id + '" class="' + className + '"><button type="button" class="btn btn-outline btn-xs btn-danger" title="@Str.Delete"><i class="fa fa-nomargin fa-times"></i></button> <label for="cbTag' + id + '">' + encode(tag.name[valueProp]) + '</label> <i class="fa fa-asterisk fa-nomargin" title="@Str._Obrigatoria"></i><select size="1" class="form-control upper"></select></div>')[0];
			select = $(div.getElementsByTagName("select")[0]);
			select.append('<option value="">@Str.SELECT</option>');
			for (i = 0; i < tag.values.length; i++) {
				v = tag.values[i];
				select.append('<option value="' + v.id + '">' + encode(v.name[valueProp]) + '</option>');
			}
			prepareCbSearch(select[0]);
			if (valueId)
				setCbSearch(select[0], valueId);
			divTagsBody.appendChild(div);

			divTagsBody.className = "panel-body no-bottom";

			//if (save)
			//	saveFilter();

			return div;
		}

		(function () {
			var i;
			for (i = tags.length - 1; i >= 0; i--)
				tagsById[tags[i].id] = tags[i];
		})();

		function updateDeleteProgress(i) {
			lblDeleteProgress.textContent = "@Html.Raw(Str.DeletingDocument) " + (i + 1) + " @Str._de " + selId.length + ". @Html.Raw(Str.CloseThisMessageToStopDeleting)";
		}

		function deleteDocument(i) {
			setTimeout(function () {
				if (!proceedDeletion || i >= selId.length)
					return;

				updateDeleteProgress(i);

				JsonWebApi.get("@Url.Action("Delete")", function (response) {
					if (response.success) {
						dataTableMain.row(selTr[i]).remove().draw();
						i++;
						if (i >= selId.length) {
							Notification.hide();
							$("#modalDeleting").modal("hide");
						} else {
							deleteDocument(i);
						}
					} else {
						Notification.error(response.value, true);
						$("#modalDeleting").modal("hide");
					}
				}, "id", selId[i]);
			}, 500);
		}

		$("#modalDeleting").on("shown.bs.modal", function () {
			if (!proceedDeletion || !selId.length)
				return;

			Notification.wait();

			deleteDocument(0);
		});

		$("#modalDeleting").on("hide.bs.modal", function () {
			Notification.hide();
			selId = [];
			selTr = [];
			proceedDeletion = false;
		});

		$("#modalDelete").on("shown.bs.modal", function () {
			txtDeleteContentConfirm.focus();
		});

		$("#modalDelete").on("hidden.bs.modal", function () {
			if (!proceedDeletion || !selId.length)
				return;

			$("#modalDeleting").modal({
				backdrop: true,
				keyboard: true
			});
		});

		function confirmDelete() {
			if (txtDeleteContentConfirm.value.toUpperCase() !== "@Str.YES" || JsonWebApi.active)
				return;

			updateDeleteProgress(0);
			proceedDeletion = true;
			$("#modalDelete").modal("hide");
		}

		function fillSelected() {
			var i, id, td, tds, input, tr, trs = _("dataTableMain").getElementsByTagName("tr");

			selId = [];
			selTr = [];
			proceedDeletion = false;

			for (i = 0; i < trs.length; i++) {
				tr = trs[i];
				if (!tr)
					continue;
				tds = tr.getElementsByTagName("td");
				if (!tds || !tds.length || !(td = tds[0]) ||
					!(tds = td.getElementsByTagName("input")) ||
					!tds.length ||
					!(input = tds[0]) ||
					!input.checked ||
					isNaN(id = parseInt(input.getAttribute("data-id"))) ||
					id <= 0)
					continue;
				selId.push(id);
				selTr.push(tr);
			}

			if (!selId.length) {
				Notification.error("@Html.Raw(Str.NoDocumentsSelected)");
				return false;
			}

			return true;
		}

		function showModalDeleteSelected() {
			if (JsonWebApi.active || !fillSelected())
				return;

			if (selId.length > 50) {
				Notification.error("@Html.Raw(Str.ForSecurityReasonsDeleteDocument)", true);
				return;
			}

			txtDeleteContentConfirm.value = "";
			lblDeleteContentCount.textContent = selId.length + (selId.length === 1 ? " @Str.document" : " @Str.documents");

			$("#modalDelete").modal({
				backdrop: true,
				keyboard: true
			});
		}

		function downloadSelected() {
			if (JsonWebApi.active || !fillSelected())
				return;

			if (selId.length === 1) {
				var i, a, as = selTr[0].getElementsByTagName("a");
				for (i = 0; i < as.length; i++) {
					a = as[i];
					if (a.getAttribute("data-download") == "1") {
						a.click();
						return;
					}
				}
			}

			window.open("@Url.Action("DownloadSelected")/" + selId.join("|") + "/@(Str.SelectedDocuments).zip");
		}

		_("form").onsubmit = function (e) {
			if (JsonWebApi.active)
				return;

			saveFilter();

			Notification.wait();

			resetMultipleSelection();

			window.dataTableMain = undefined;
			dataTablePanel.className = "panel panel-default hidden";
			while (dataTableMainPlaceholder.firstChild)
				dataTableMainPlaceholder.removeChild(dataTableMainPlaceholder.firstChild);

			var i, div, value, formData = new FormData();

			formData.append("unity", _("unity").value);
			formData.append("course", _("course").value);
			formData.append("partitionType", _("partitionType").value);
			formData.append("documentType", _("documentType").value);
			formData.append("id", _("id").value);
			formData.append("name", _("name").value);
			formData.append("minimumCreationTime", parseDateInput("minimumCreationTime"));
			formData.append("maximumCreationTime", parseDateInput("maximumCreationTime"));

			for (i = 0; i < divTagsBody.childNodes.length; i++) {
				div = divTagsBody.childNodes[i];
				if (isNaN(value = parseInt(div.getElementsByTagName("select")[0].value)) || !value)
					continue;
				formData.append("tagIds", div.getAttribute("data-id"));
				formData.append("tagValues", value);
			}

			JsonWebApi.postFormData("@Url.Action("GetAllByFilter")", formData, function (response) {
				Notification.hide();

				if (response.success) {
					var table = document.createElement("table");
					table.setAttribute("id", "dataTableMain");
					table.className = "table table-striped table-hover table-row-pointer";
					dataTableMainPlaceholder.appendChild(table);
					dataTablePanel.className = "panel panel-default";

					window.dataTableMain = prepareDataTable("dataTableMain", {
						order: [[2, "asc"]],
						columns: [
							{ title: " ", "class": "col-min text-center", data: null, searchable: false, orderable: false, render: function (v, type, row) { return '<input type="checkbox" data-id="' + row.id + '" />'; } },
							{ title: "@Str.Id", "class": "col-min text-right", data: "id" },
							{ title: "@Str.Unity", render: encode, data: "unity.name" },
							{ title: "@Str.Course", render: encode, data: "course.name" },
							{ title: "@Str.PartitionType", render: encode, data: "partitionType.name" },
							{ title: "@Str.DocumentType", render: encode, data: "documentType.name" },
							{ title: "@Str.Name", render: encode, data: "name" },
							{ title: "@Str.Type", "class": "col-min", render: encode, data: "extension" },
							{ title: " ", data: "size", visible: false, searchable: false, orderable: false },
							{ title: "@Str.Size", "class": "col-min text-right", data: "formattedSize", orderData: 8 },
							{ title: " ", data: "creationTimeInt", visible: false, searchable: false, orderable: false },
							{ title: "@Str.Creation", "class": "col-min text-right", data: "creationTime", orderData: 10 },
							{ title: " ", "class": "col-min", data: null, searchable: false, orderable: false, render: function (v, type, row) { return '<div class="btn-group dropup"><button type="button" title="@Str.Optional" class="btn btn-outline btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-nomargin fa-ellipsis-v"></i></button><ul class="dropdown-menu dropdown-menu-right"><li><a target="_blank" href="@(Url.Action(""))/' + row.id + '/' + row.safeDownloadName + '"><i class="fa fa-fw fa-file-text-o"></i>@Str.View</a></li><li><a data-download="1" target="_blank" href="@(Url.Action(""))/Download/' + row.id + '/' + row.safeDownloadName + '"><i class="fa fa-fw fa-cloud-download"></i>@Str.Download</a></li>@if (ViewBag.DocumentEdit == true) {<li><a target="_blank" href="@(Url.Action("Edit"))?id=' + row.id + '" class=""><i class="fa fa-fw fa-edit"></i>@Str.Edit</a></li>}</ul></div>'; } }
						],
						data: response.value,
						deferRender: true,
						export: {
							title: "@Str.Documents",
							filterTitle: "@Str.Filter",
							filters: $("#form").prepareFilters()
						}
					});
					prepareDataTableMain(true);
					$("#dataTableMain > tbody").on("click", "input", toggleMultipleSelection);
					@if (ViewBag.DocumentDelete == true) {
						<text>
						addFilterButton("dataTableMain_filter", "fa-nomargin fa-times", "", showModalDeleteSelected, "@Str.DeleteSelected", "btn-danger");
						</text>
					}
					addFilterButton("dataTableMain_filter", "fa-nomargin fa-cloud-download", "", downloadSelected, "@Str.DownloadSelected", "btn-primary");
				} else {
					Notification.error(response.value, true);
				}
			});

			return cancelEvent(e);
		};

		(function () {
			$("#divMultipleSelectionHelp i").tooltip();
			prepareDatePicker("#minimumCreationTime");
			prepareDatePicker("#maximumCreationTime");

			if (window.localStorage) {
				var filterTimeout = 0;

				window.saveFilter = function () {
					if (filterTimeout)
						clearTimeout(filterTimeout);
					filterTimeout = setTimeout(function () {
						filterTimeout = 0;
						var i, div, tagIds = [], tagValues = [];
						for (i = 0; i < divTagsBody.childNodes.length; i++) {
							tagIds.push(parseInt((div = divTagsBody.childNodes[i]).getAttribute("data-id")));
							tagValues.push(parseInt(div.getElementsByTagName("select")[0].value) || 0);
						}
						localStorage.setItem("filter/document/manage", JSON.stringify({
							unity: _("unity").value,
							course: _("course").value,
							partitionType: _("partitionType").value,
							documentType: _("documentType").value,
							id: _("id").value,
							name: _("name").value,
							minimumCreationTime: parseDateInput("minimumCreationTime"),
							maximumCreationTime: parseDateInput("maximumCreationTime"),
							tagIds: tagIds,
							tagValues: tagValues
						}));
					}, 1000);
				}

				try {
					var i, obj = localStorage.getItem("filter/document/manage");
					if (obj && (obj = JSON.parse(obj))) {
						setCbSearch(_("unity"), obj.unity);
						setCbSearch(_("course"), obj.course);
						setCbSearch(_("partitionType"), obj.partitionType);
						setCbSearch(_("documentType"), obj.documentType);
						_("id").value = obj.id;
						_("name").value = obj.name;
						if (obj.minimumCreationTime)
							setDatePickerValue("#minimumCreationTime", formatDate(obj.minimumCreationTime));
						if (obj.maximumCreationTime)
							setDatePickerValue("#maximumCreationTime", formatDate(obj.maximumCreationTime));
						if (obj.tagIds && obj.tagValues && obj.tagIds.length && obj.tagIds.length === obj.tagValues.length) {
							for (i = 0; i < obj.tagIds.length; i++)
								addTag(obj.tagIds[i], obj.tagValues[i]);
						}
					}
				} catch (e) {
					// Just ignore...
				}

				//_("unity").addEventListener("change", saveFilter);
				//_("course").addEventListener("change", saveFilter);
				//_("partitionType").addEventListener("change", saveFilter);
				//_("documentType").addEventListener("change", saveFilter);
				//_("id").addEventListener("change", saveFilter);
				//_("name").addEventListener("change", saveFilter);
				//_("minimumCreationTime").addEventListener("blur", saveFilter);
				//_("maximumCreationTime").addEventListener("blur", saveFilter);
			}

		})();

		//]]>
	</script>
}
