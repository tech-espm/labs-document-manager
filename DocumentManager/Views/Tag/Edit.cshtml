@model Tag
@{
	ViewBag.Title = (Model == null ? Str.CreateTag : Str.EditTag);
}

@section Styles {
	<style type="text/css">
		.content-section {
			counter-reset: content-section;
		}

		.content-enum::before {
			counter-increment: content-section;
			content: counter(content-section);
		}
	</style>
}

<div class="modal fade" tabindex="-1" role="dialog" id="modalDelete">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="@Str.Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">@Str.Oops</h4>
			</div>
			<div class="modal-body">
				<p class="no-margin-bottom">@Str.DoYouReallyWantToDeleteTheTag @Str.ThisOperationCannotBeUndone</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" onclick="deleteItem(true)"><i class="fa fa-check"></i>@Str.Delete</button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>@Str.Cancel</button>
			</div>
		</div>
	</div>
</div>

<form class="row" action="." method="post" id="form">
	<div class="col-lg-12">
		<div class="panel panel-default">
			<div class="panel-heading clearfix">
				<div class="pull-left">
					@Str.TagsBasicInformation
				</div>
				@if (Model != null && ViewBag.TagDelete == true) {
					<div class="pull-right">
						<button type="button" class="btn btn-outline btn-danger btn-xs" onclick="deleteItem(false)"><i class="fa fa-times"></i>@Str.Delete</button>
					</div>
				}
			</div>
			<div class="panel-body no-bottom">
				@if (Model != null) {
					<div class="form-group text-right">
						<span class="label label-default">Id @Model.Id</span>
					</div>
				}
				<div class="row">
					<div class="col-sm-6">
						<div class="form-group">
							<label for="nameEn">@Str.Name (@Str.English)</label>
							<input id="nameEn" name="nameEn" maxlength="64" class="form-control upper" type="text" value="@(Model == null ? "" : Model.Name.ValueEn)" />
						</div>
					</div>
					<div class="col-sm-6">
						<div class="form-group">
							<label for="namePtBr">@Str.Name (@Str.Portuguese)</label>
							<input id="namePtBr" name="namePtBr" maxlength="64" class="form-control upper" type="text" value="@(Model == null ? "" : Model.Name.ValuePtBr)" />
						</div>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading clearfix">
						<div class="pull-left">
							@Str.Values
						</div>
						<div class="pull-right">
							<button type="button" class="btn btn-outline btn-success btn-xs" onclick="addValue()"><i class="fa fa-plus"></i>@Str.AddValue</button>
						</div>
					</div>
					<div class="panel-body">
						<div class="table-responsive">
							<table class="table table-striped table-hover no-margin-bottom">
								<thead>
									<tr>
										<th></th>
										<th class="col-50">@Str.Value (@Str.English)</th>
										<th class="col-50">@Str.Value (@Str.Portuguese)</th>
										<th></th>
									</tr>
								</thead>
								<tbody id="tableValuesBody" class="content-section ui-sortable">
									@if (Model != null && Model.Values != null) {
										for (int i = 0; i < Model.Values.Count; i++) {
											Tag.Value value = Model.Values[i];
											<tr data-id="@value.Id" class="ui-sortable-handle">
												<td class="col-min content-enum"></td>
												<td class="col-50"><input id="valueEn@(i)" name="valueEn@(i)" maxlength="64" class="form-control upper" type="text" value="@value.Name.ValueEn" /></td>
												<td class="col-50"><input id="valuePtBr@(i)" name="valuePtBr@(i)" maxlength="64" class="form-control upper" type="text" value="@value.Name.ValuePtBr" /></td>
												<td class="col-min"><button type="button" title="@Str.Delete" class="btn btn-outline btn-danger"><i class="fa fa-nomargin fa-trash-o"></i></button></td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
			<div class="panel-footer">
				<input value="@(Model == null ? Str.CreateTag : Str.SaveChanges)" class="btn btn-primary btn-lg btn-block" type="submit" />
			</div>
		</div>
	</div>
</form>

@section Scripts {
	<script type="text/javascript">
		//<![CDATA[
		"use strict";

		var nextInputId = 0;

		@if (Model != null && Model.Values != null) {
			<text>
			nextInputId = @Model.Values.Count;
			</text>
		}

		$("#tableValuesBody").sortable().disableSelection();

		function addValue() {
			$("#tableValuesBody").append('<tr data-id="0" class="ui-sortable-handle"><td class="col-min content-enum"></td><td class="col-50"><input id="valueEn' + nextInputId + '" name="valueEn' + nextInputId + '" maxlength="64" class="form-control upper" type="text" /></td><td class="col-50"><input id="valuePtBr' + nextInputId + '" name="valuePtBr' + nextInputId + '" maxlength="64" class="form-control upper" type="text" /></td><td class="col-min"><button type="button" title="@Str.Delete" class="btn btn-outline btn-danger"><i class="fa fa-nomargin fa-trash-o"></i></button></td></tr>');
			$("#valueEn" + nextInputId).rules("add", {
				maxlength: 64,
				required: true
			});
			$("#valuePtBr" + nextInputId).rules("add", {
				maxlength: 64,
				required: true
			});
			nextInputId++;
		}

		$("#tableValuesBody").on("click", "button", function () {
			document.getElementById("tableValuesBody").removeChild(this.parentNode.parentNode);
		});

		function deleteItem(confirmed) {
			if (JsonWebApi.active)
				return;

			Notification.hide();

			if (!confirmed) {
				$("#modalDelete").modal({
					backdrop: true,
					keyboard: true
				});
			} else {
				$("#modalDelete").modal("hide");

				Notification.wait();

				JsonWebApi.get("@Url.Action("Delete")", function (response) {
					if (response.success)
						window.location.href = "@Url.Action("Manage")";
					else
						Notification.error(response.value, true);
				}, "id", "@(Model == null ? 0 : Model.Id)");
			}
		}

		$("#form").validate({
			rules: {
				nameEn: {
					maxlength: 64,
					required: true
				},
				namePtBr: {
					maxlength: 64,
					required: true
				},
				@if (Model != null && Model.Values != null) {
					for (int i = 0; i < Model.Values.Count; i++) {
						<text>
						valueEn@(i): {
							maxlength: 64,
							required: true
						},
						valuePtBr@(i): {
							maxlength: 64,
							required: true
						},
						</text>
					}
				}
			},
			submitHandler: function (form) {
				if (JsonWebApi.active)
					return;

				var nameEn = _("nameEn").value, namePtBr = _("namePtBr").value, values = [], i, trs, inputs;

				trs = document.getElementById("tableValuesBody").getElementsByTagName("tr");
				for (i = 0; i < trs.length; i++) {
					inputs = trs[i].getElementsByTagName("input");
					values.push({
						id: parseInt(trs[i].getAttribute("data-id")),
						position: i,
						name: {
							valueEn: inputs[0].value,
							valuePtBr: inputs[1].value
						}
					});
				}

				if (!values.length) {
					Notification.error("@Html.Raw(Str.AtLeastOneValueNeedsToBeAddedToTheTag)", true);
					return;
				}

				Notification.wait();

				@if (Model == null) {
					<text>
					JsonWebApi.post("@Url.Action("Create")", values, function (response) {
						if (response.success) {
							resetForm(form);
							$("#tableValuesBody").empty();
							Notification.success("@Html.Raw(Str.TagSuccessfullyCreated)");
						} else {
							Notification.error(response.value, true);
						}
					}, "nameEn", nameEn, "namePtBr", namePtBr);
					</text>
				} else {
					<text>
					JsonWebApi.post("@Url.Action("Update")", values, function (response) {
						if (response.success) {
							var i, values = response.value.values, trs = document.getElementById("tableValuesBody").getElementsByTagName("tr");
							for (i = values.length - 1; i >= 0; i--)
								trs[i].setAttribute("data-id", values[i].id);
							Notification.success("@Html.Raw(Str.TagSuccessfullyChanged)");
						} else {
							Notification.error(response.value, true);
						}
					}, "id", "@Model.Id", "nameEn", nameEn, "namePtBr", namePtBr);
					</text>
				}
			}
		});

		//]]>
	</script>
}
